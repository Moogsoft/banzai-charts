{{ if .Values.receive.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "thanos.componentname" (list $ "receive") }}
  labels:
    app.kubernetes.io/name: {{ include "thanos.name" . }}
    helm.sh/chart: {{ include "thanos.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
    app.kubernetes.io/component: receive
{{ with .Values.receive.statefulsetLabels }}{{ toYaml . | indent 4 }}{{ end -}}
  {{- with .Values.receive.statefulsetAnnotations }}
  annotations: {{ toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.receive.autoscaling.enabled }}
  replicas: {{ .Values.receive.replicaCount | default 1 }}
  {{- end }}
  {{- with  .Values.receive.updateStrategy }}
  updateStrategy: {{ toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "thanos.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: receive
  {{- with .Values.receive.statefulsetMatchLabels }}{{ toYaml . | indent 6 }}{{- end }}
  serviceName: {{ .Release.Name }}-receive   # TODO i dont think this will work; should it be a monolith service?
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "thanos.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: receive
      {{- with .Values.receive.labels }}{{ toYaml . | indent 8 }}{{- end }}
      {{- with .Values.receive.annotations }}
      annotations: {{ toYaml . | nindent 8 }}
    {{- end }}
    spec:
      containers:
      - name: thanos-receive
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources: {{ toYaml .Values.receive.resources | nindent 10 }}
        env:
          - name: NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        {{- with .Values.receive.extraEnv }}
          {{ toYaml . | nindent 8 }}
        {{- end }}
        args:
          - "receive"
          - "--log.level={{ .Values.receive.logLevel }}"
          - "--log.format={{ .Values.receive.logFormat }}"
          - "--grpc-address=0.0.0.0:{{ .Values.receive.grpc.port }}"
          - "--http-address=0.0.0.0:{{ .Values.receive.http.port }}"
          - "--remote-write.address=0.0.0.0:{{ .Values.receive.remoteWrite.port }}"
          - "--receive.replication-factor={{ .Values.receive.replicationFactor }}"
          - "--objstore.config-file=/etc/config/object-store.yaml"
          - "--tsdb.path=/var/thanos/receive"
          - "--tsdb.retention={{ .Values.receive.tsdbRetention }}"
          {{- if .Values.receive.localEndpoint}}
          - "--receive.local-endpoint={{ .Values.receive.localEndpoint }}"
          {{- else }}
          - "--receive.local-endpoint=$(NAME).{{ .Release.Name }}-receive.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.receive.grpc.port }}"
          {{- end }}
          - "--label=replica=\"$(NAME)\""
          - "--label=receive=\"true\""
          {{- if .Values.receive.hashring.enabled }}
          - "--receive.hashrings-file=/var/lib/thanos-receive/hashrings.json"
          {{- end }}
          {{- if .Values.receive.tenantLabelName }}
          - "--receive.tenant-label-name={{.Values.receive.tenantLabelName }}"
          {{- end }}
          {{- if .Values.receive.tenantHeader }}
          - "--receive.tenant-header={{ .Values.receive.tenantHeader }}"
          {{- end }}
        {{- range $key, $val := .Values.receive.receiveLabels }}
          - '--label={{ $key }}={{ $val | quote }}'
        {{- end }}
        {{- if .Values.receive.extraArgs }}
        {{- toYaml .Values.receive.extraArgs | nindent 8 }}
        {{- end }}
        ports:
          - name: http
            containerPort: {{ .Values.receive.http.port }}
          - name: grpc
            containerPort: {{ .Values.receive.grpc.port }}
          - name: remote-write
            containerPort: {{ .Values.receive.remoteWrite.port }}
        volumeMounts:
          - name: config-volume
            mountPath: /etc/config
            readOnly: true
          - mountPath: /var/thanos/receive
            name: data
            readOnly: false
          {{- if .Values.receive.hashring.enabled }}
          - mountPath: /var/lib/thanos-receive
            name: hashring-config
          {{- end }}
          {{- if .Values.receive.certSecretName }}
          - mountPath: /etc/certs
            name: {{ .Values.receive.certSecretName }}
            readOnly: true
          {{- end }}
        {{- if .Values.receive.livenessProbe }}
        livenessProbe: {{ toYaml .Values.receive.livenessProbe | nindent 8 }}
        {{- end }}
        {{- if .Values.receive.readinessProbe }}
        readinessProbe: {{ toYaml .Values.receive.readinessProbe | nindent 8 }}
        {{- end }}
        terminationMessagePolicy: FallbackToLogsOnError
      {{- with .Values.receive.securityContext }}
      securityContext: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.receive.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.receive.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.receive.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with  .Values.receive.serviceAccount }}
      serviceAccountName: "{{ . }}"
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- with  .Values.receive.serviceAccount }}
      serviceAccountName: "{{ . }}"
      {{- end }}
      terminationGracePeriodSeconds: 900
      volumes:
      - name: config-volume
        secret:
          {{- if .Values.objstoreSecretOverride }}
          secretName: "{{ .Values.objstoreSecretOverride }}"
          {{- else }}
          secretName: {{ include "thanos.fullname" . }}
          {{- end }}
        {{- if .Values.receive.hashring.enabled }}
      - name: hashring-config
        configMap:
          {{- if .Values.receive.hashring.configmap.create }}
          name: {{ include "thanos.fullname" . }}-receive
          {{- else }}
          name: {{ .Values.receive.hashring.configmap.name | default (printf "%s-receive" (include "thanos.fullname" .))}}
          {{- end }}
      {{- end }}
      {{- if .Values.receive.certSecretName }}
      - name: {{ .Values.receive.certSecretName }}
        secret:
          defaultMode: 420
          secretName: {{ .Values.receive.certSecretName }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: {{ include "thanos.name" . }}
          helm.sh/chart: {{ include "thanos.chart" . }}
          app.kubernetes.io/instance: {{ .Release.Name }}
          app.kubernetes.io/managed-by: {{ .Release.Service }}
          app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
          app.kubernetes.io/component: receive
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.receive.dataVolume.size }}
    {{ range .Values.receive.extraPersistentVolumeClaims }}
    - metadata:
        name: {{ .name }}
        labels:
          app.kubernetes.io/name: {{ include "thanos.name" . }}
          helm.sh/chart: {{ include "thanos.chart" . }}
          app.kubernetes.io/instance: {{ .Release.Name }}
          app.kubernetes.io/managed-by: {{ .Release.Service }}
          app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
          app.kubernetes.io/component: receive
      spec:
    {{- toYaml .spec | nindent 6 }}{{- end }}
{{- end }}
